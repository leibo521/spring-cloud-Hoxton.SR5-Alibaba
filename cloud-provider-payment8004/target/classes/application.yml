# 服务端口号
server:
  port: 8004
# 服务的名字
spring:
  cloud:
    # 定义zookeeper的连接信息
#    zookeeper:
#      connect-string: 192.168.43.246:2181
  # 定义consul的注册中心地址
    consul:
      host: 192.168.43.246
      port: 8500
      discovery:
        # 定义服务的名字
        service-name: ${spring.application.name}
  application:
    #将会作为eureka中的服务的服务名
    name: cloud-payment-service
  datasource:
    # 设置初始化大小，最小，最大,下面这些配置是针对druid数据源的
    initialSize: 10
    minIdle: 3
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 6000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 30000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,slf4j
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    username: root
    password: 158293
    url: jdbc:mysql:///myemployees?serverTimezone=GMT&rewriteBatchedStatements=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
mybatis:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    # 使用驼峰命令
    map-underscore-to-camel-case: true
logging:
  level: {com.study.payment.dao: debug}
##配置eureka的提供者
#eureka:
#  client:
#    register-with-eureka: true
#    # 是否从EurekaServer抓取已经有的注册信息,默认为false,单节点无所谓,集群必须设置true/才能配合ribbon使用负载均衡
#    fetch-registry: true
#    service-url:
#      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/
#  instance:
#    # 改变实例的名字
#    instance-id: payment8003
#    prefer-ip-address: true